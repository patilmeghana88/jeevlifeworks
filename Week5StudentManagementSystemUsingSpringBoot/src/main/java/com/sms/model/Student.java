package com.sms.model;
// Marks this class as a JPA entity that maps to a database table
import jakarta.persistence.Entity;

// Used to specify that the primary key value should be generated automatically
import jakarta.persistence.GeneratedValue;

// Defines the strategy for primary key generation (e.g., auto-increment)
import jakarta.persistence.GenerationType;

// Marks a field as the primary key of the entity
import jakarta.persistence.Id;

// Ensures the annotated field must be at least the specified value (for numbers)
import jakarta.validation.constraints.Min;

// Ensures the annotated string is not null or blank
import jakarta.validation.constraints.NotBlank;

// Ensures the string matches a specific regular expression
import jakarta.validation.constraints.Pattern;

// Lombok annotation to generate getters, setters, toString, equals, and hashCode methods
import lombok.AllArgsConstructor;

// Lombok annotation to enable the builder pattern for object creation
import lombok.Builder;

// Lombok annotation to generate all boilerplate methods like getters/setters, toString, etc.
import lombok.Data;

// Lombok annotation to generate a no-argument constructor
import lombok.NoArgsConstructor;

// Specifies this class is a JPA entity mapped to a database table named "student" (default)
@Entity

// Generates getters, setters, equals, hashCode, toString using Lombok
@Data

// Generates a no-argument constructor
@NoArgsConstructor

// Generates a constructor with all fields
@AllArgsConstructor

// Enables the builder design pattern for creating instances
@Builder
public class Student {

    // Primary key of the entity; automatically generated by the database (auto-increment)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Name field cannot be null or blank; validation error message is provided
    @NotBlank(message = "Name cannot be empty")
    private String name;

    // Age must be at least 1; otherwise validation error is thrown
    @Min(value = 1, message = "Age must be positive")
    private int age;

    // Grade must match one of the allowed formats (e.g., A+, A, B+); otherwise validation fails
    @Pattern(regexp = "^(A\\+|A|B\\+|B|C\\+|C|-)$", message = "Invalid grade format")
    private String grade;

    // Address is an optional string field (no validation applied)
    private String address;
}
